/** @jsx jsx */
import { Fragment, useCallback } from 'react';
import { css, jsx } from '@storybook/theming';
import { FlexBar, IconButton, Icons, Placeholder, Separator } from '@storybook/components';
import { Document, Page } from 'react-pdf/dist/entry.webpack';
import { Pan } from './Pan';
import { ZoomButtons } from './ZoomButtons';
import { usePage } from './hooks/usePage';
import { useZoom } from './hooks/useZoom';
const loadingMessage = jsx(Placeholder, null, "Loading PDF...");
export const Pdf = ({ config }) => {
    const page = usePage(config.page);
    const onLoadPdf = useCallback(doc => {
        page.init(doc.numPages);
    }, [page.init]);
    const { scale, zoomIn, zoomOut, resetZoom } = useZoom(config.scale || 1, [
        config.scale
    ]);
    return (jsx("div", { css: $container },
        jsx(FlexBar, { border: true },
            jsx(Fragment, { key: "left" },
                jsx("p", null,
                    jsx("b", null, "PDF")),
                jsx(Separator, null),
                jsx(ZoomButtons, { onReset: resetZoom, onZoomIn: zoomIn, onZoomOut: zoomOut }),
                jsx(Separator, null),
                jsx(IconButton, { css: $disabled, onClick: page.prev, disabled: page.isFirst },
                    jsx(Icons, { icon: "arrowleft" })),
                jsx("div", { css: $pageIndicator },
                    page.current,
                    " / ",
                    page.total),
                jsx(IconButton, { css: $disabled, onClick: page.next, disabled: page.isLast },
                    jsx(Icons, { icon: "arrowright" })))),
        jsx(Pan, { css: $pdf, defaultValue: config.offset },
            jsx(Document, { file: config.url, loading: loadingMessage, onLoadSuccess: onLoadPdf },
                jsx(Page, { css: $page, loading: loadingMessage, pageNumber: page.current, scale: scale })))));
};
export default Pdf;
const $container = css `
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  flex-direction: column;
  align-items: stretch;
`;
const $disabled = (theme) => css `
  &[disabled] {
    color: ${theme.color.medium};
    cursor: not-allowed;
  }
`;
const $pdf = css `
  flex-grow: 1;
`;
const $page = css `
  position: absolute !important;
  top: 50%;
  left: 50%;
  display: inline-block;

  border-radius: 1px;
  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.15);

  transform: translate(-50%, -50%);
`;
const $pageIndicator = css `
  display: flex;
  align-items: center;
`;
