/** @jsx jsx */
import { useEffect, useMemo, useState } from 'react';
import { css, jsx } from '@storybook/theming';
import { usePan } from './hooks/usePan';
export const Pan = ({ children, className, style, defaultValue, value, onChange }) => {
    const [offset, move] = useState([0, 0]);
    useEffect(() => {
        if (defaultValue) {
            move(defaultValue);
        }
        else {
            move(value || [0, 0]);
        }
    }, [defaultValue]);
    const panHandlers = usePan(delta => {
        if (onChange) {
            onChange(delta);
        }
        move(prev => [prev[0] + delta[0], prev[1] + delta[1]]);
    }, [move, onChange]);
    const transform = useMemo(() => {
        const vec = value || offset;
        return {
            transform: `translate(${vec[0]}px, ${vec[1]}px)`
        };
    }, [value, offset]);
    return (jsx("div", Object.assign({ css: $container, className: className, style: style }, panHandlers),
        jsx("div", { css: $transformLayer, style: transform }, children)));
};
export default Pan;
const $container = css `
  position: relative;
  overflow: hidden;

  &:active {
    cursor: move;
  }
`;
const $transformLayer = css `
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
`;
