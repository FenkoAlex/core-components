/** @jsx jsx */
import { Fragment, useEffect, useState } from 'react';
import { jsx } from '@storybook/theming';
import { STORY_CHANGED } from '@storybook/core-events';
import { Link, Placeholder, TabsState } from '@storybook/components';
import { Events, ParameterName } from '../../addon';
import { Figma } from './Figma';
import { IFrame } from './IFrame';
import { ImagePreview } from './Image';
import { Pdf } from './Pdf';
export const Wrapper = ({ active, api, channel }) => {
    const [config, setConfig] = useState();
    const [storyId, changeStory] = useState();
    useEffect(() => {
        const onStoryChanged = (id) => {
            changeStory(id);
            const cfg = api.getParameters(id, ParameterName);
            setConfig(prev => (cfg !== prev ? cfg : prev));
        };
        channel.on(Events.UpdateConfig, setConfig);
        channel.on(STORY_CHANGED, onStoryChanged);
        return () => {
            channel.removeListener(Events.UpdateConfig, setConfig);
            channel.removeListener(STORY_CHANGED, onStoryChanged);
        };
    }, []);
    if (!active) {
        return null;
    }
    if (!config || ('length' in config && config.length === 0)) {
        return (jsx(Placeholder, null,
            jsx(Fragment, null, "No designs found"),
            jsx(Fragment, null,
                "Learn how to",
                ' ',
                jsx(Link, { href: "https://github.com/pocka/storybook-addon-designs#usage", target: "_blank", rel: "noopener", withArrow: true, cancel: false }, "display design preview for the story"))));
    }
    const panels = [...(config instanceof Array ? config : [config])].map((cfg, i) => {
        const meta = {
            id: `addon-designs-tab--${i}`,
            title: cfg.name || cfg.type.toUpperCase()
        };
        switch (cfg.type) {
            case 'iframe':
                return [jsx(IFrame, { config: cfg }), meta];
            case 'figma':
                return [jsx(Figma, { config: cfg }), meta];
            case 'pdf':
                return [jsx(Pdf, { config: cfg }), meta];
            case 'image':
                return [jsx(ImagePreview, { key: storyId, config: cfg }), meta];
        }
        return [
            jsx(Placeholder, null,
                jsx(Fragment, null, "Invalid config type"),
                jsx(Fragment, null,
                    "Config type you set is not supported. Please choose one from",
                    ' ',
                    jsx(Link, { href: "https://github.com/pocka/storybook-addon-designs#available-types", target: "_blank", rel: "noopener", withArrow: true, cancel: false }, "available config types"))),
            meta
        ];
    });
    if (panels.length === 1) {
        return jsx("div", { key: storyId }, panels[0][0]);
    }
    return (jsx(TabsState, { key: storyId, absolute: true, initial: panels[0][1].id }, panels.map(([el, meta]) => (jsx("div", { key: meta.id, id: meta.id, title: meta.title }, el)))));
};
export default Wrapper;
