import { useCallback, useState } from 'react';
export const usePan = (cb, deps) => {
    const [lastPosition, savePosition] = useState([0, 0]);
    const [isPanning, setPanState] = useState(false);
    const onMouseDown = useCallback(ev => {
        // Ensure to turn on pan mode only for main button down
        if (ev.button !== 0) {
            return;
        }
        savePosition([ev.screenX, ev.screenY]);
        setPanState(true);
    }, [setPanState, savePosition]);
    const onTouchStart = useCallback(ev => {
        const touch = ev.touches[0];
        savePosition([touch.screenX, touch.screenY]);
        setPanState(true);
    }, [setPanState, savePosition]);
    const move = useCallback((p) => {
        if (!isPanning) {
            return;
        }
        savePosition(prev => {
            cb([p[0] - prev[0], p[1] - prev[1]]);
            return p;
        });
    }, [savePosition, isPanning, ...deps]);
    const onMouseMove = useCallback(ev => {
        const { screenX, screenY } = ev;
        move([screenX, screenY]);
    }, [move]);
    const onTouchMove = useCallback(ev => {
        const { screenX, screenY } = ev.touches[0];
        move([screenX, screenY]);
    }, [savePosition, isPanning, ...deps]);
    const clear = useCallback(() => {
        savePosition([0, 0]);
        setPanState(false);
    }, [setPanState, savePosition]);
    return {
        onMouseDown,
        onMouseMove,
        onMouseUp: clear,
        onMouseLeave: clear,
        onTouchStart,
        onTouchMove,
        onTouchCancel: clear,
        onTouchEnd: clear
    };
};
